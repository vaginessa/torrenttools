name: Package

on:
  workflow_dispatch:
    branches: [ main, develop ]
    inputs:
      linux:
        description: 'Create a linux AppImage'
        required: true
        default: 'on'
      windows:
        description: 'Create a windows installer'
        required: true
        default: 'on'
      macos:
        description: 'Create a macOS installer'
        required: true
        default: 'on'

jobs:
  package-tarball:
    name: "Tarball"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install build dependencies
        run: sudo apt-get install -y libstdc++-10-dev g++-10 gcc-10 cmake libssl-dev libtbb-dev libre2-dev libyaml-cpp-dev nlohmann-json3-dev

      - name: Fetch external projects
        run: scripts/fetch_dependencies.sh

      - name: Configure
        run: |
          cmake -S . -B cmake-build-release -DCMAKE_CXX_COMPILER=g++-10 -DCMAKE_BUILD_TYPE=Release -DTORRENTTOOLS_BUILD_TESTS=ON

      - name: Build tarball
        working-directory: cmake-build-release
        run: |
          cpack --config CPackSourceConfig.cmake -G TGZ

      - name: Determine Version
        id: cmake_version
        run: |
          CMAKE_PROJECT_VERSION=$(grep -oP "(?<=CMAKE_PROJECT_VERSION:STATIC=).*" cmake-build-release/CMakeCache.txt)
          echo "::set-output name=cmake_project_version::${CMAKE_PROJECT_VERSION}"
          echo "${CMAKE_PROJECT_VERSION}" > version.txt

      - name: Save version.txt
        uses: actions/upload-artifact@v2
        with:
          name: version.txt
          path: version.txt
          retention-days: 1

      - name: Upload tarball as artifact
        uses: actions/upload-artifact@v2
        with:
          name: torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }}.tar.gz
          path: cmake-build-release/torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }}.tar.gz
          retention-days: 1

  package-windows:
    name: "Windows installer"
    if: ${{ github.event.inputs.windows == 'on' }}
    runs-on: windows-latest
    needs: [ package-tarball ]
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            make
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-yasm
            mingw-w64-x86_64-openssl
            mingw-w64-x86_64-intel-tbb
      - name: Download version file
        uses: actions/download-artifact@v4.1.7
        with:
          name: version.txt

      - name: Retrieve version
        id : cmake_version
        run: |
          CMAKE_PROJECT_VERSION="$(cat version.txt)"
          echo "::set-output name=cmake_project_version::${CMAKE_PROJECT_VERSION}"

      - name: Download tarball artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }}.tar.gz

      - name: Unpack sources tarball
        run: |
          tar -zxf torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }}.tar.gz \
              --exclude torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }}/external/CLI11/tests \
              --exclude torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }}/packages/ubuntu

      - name: Configure
        run: |
          cmake -G "MSYS Makefiles" \
                 -B cmake-build-release \
                 -S torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }} \
                 -DDOTTORRENT_CRYPTO_LIB=openssl \
                 -DDOTTORRENT_MB_CRYPTO_LIB=isal \
                 -DCMAKE_BUILD_TYPE=Release \
                 -DTORRENTTOOLS_BUILD_TESTS=OFF \
                 -DTORRENTTOOLS_BUILD_DOCS=OFF

      - name: Build
        run: cmake --build cmake-build-release --target torrenttools

      - name: Check linkage
        run: ldd cmake-build-release/torrenttools.exe

      - name: Package
        run: |
          cd cmake-build-release
          cpack --verbose -G WIX

      - name: Upload installer as artifact
        uses: actions/upload-artifact@v2
        with:
          name: torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }}-windows-x86_64.msi
          path: cmake-build-release/torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }}.msi
          retention-days: 1

  package-macos:
    name: "macOS installer"
    if: ${{ github.event.inputs.macos == 'on' }}
    runs-on: macos-latest
    needs: [ package-tarball ]
    steps:
      - name: Download version file
        uses: actions/download-artifact@v4.1.7
        with:
          name: version.txt

      - name: Retrieve version
        id: cmake_version
        run: |
          CMAKE_PROJECT_VERSION="$(cat version.txt)"
          echo "::set-output name=cmake_project_version::${CMAKE_PROJECT_VERSION}"

      - name: Download tarball artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }}.tar.gz

      - name: Unpack sources tarball
        run: |
          tar -zxf torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }}.tar.gz \
              --exclude torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }}/external/CLI11/tests

      - name: Install build dependencies
        run: |
          brew install cmake
          brew install gcc
          brew install openssl
          brew install autoconf
          brew install automake
          brew install libtool
          brew install nasm

      - name: List working dir
        run: ls -al .

      - name: Configure
        run: |
          cmake -G "Unix Makefiles" \
              -B cmake-build-release \
              -S torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }} \
              -DCMAKE_CXX_COMPILER=g++-11 \
              -DCMAKE_C_COMPILER=gcc-11 \
              -DOPENSSL_ROOT_DIR=/usr/local/Cellar/openssl@1.1/1.1.1l \
              -DCMAKE_BUILD_TYPE=Release \
              -DTORRENTTOOLS_BUILD_TESTS=OFF \
              -DTORRENTTOOLS_TBB=OFF \
              -DDOTTORRENT_MB_CRYPTO_LIB=isal \
              -DDOTTORRENT_CRYPTO_LIB=openssl

      - name: Build
        run: cmake --build cmake-build-release

      - name: Package
        run: |
          cd cmake-build-release
          cpack --verbose -G productbuild

      - name: Upload installer as artifact
        uses: actions/upload-artifact@v2
        with:
          name: torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }}-macos-x86_64.pkg
          path: cmake-build-release/torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }}.pkg
          retention-days: 1

  package-linux:
    name: "Linux AppImage"
    if: ${{ github.event.inputs.linux == 'on' }}
    runs-on: ubuntu-20.04
    needs: [ package-tarball ]
    steps:
      - name: Download version file
        uses: actions/download-artifact@v4.1.7
        with:
          name: version.txt

      - name: Retrieve version
        id: cmake_version
        run: |
          CMAKE_PROJECT_VERSION="$(cat version.txt)"
          echo "::set-output name=cmake_project_version::${CMAKE_PROJECT_VERSION}"

      - name: Download tarball artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }}.tar.gz

      - name: Unpack sources tarball
        run: |
          tar -zxf torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }}.tar.gz \
                --exclude torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }}/external/CLI11/tests
      - name: Install build dependencies
        run:  |
            sudo apt-get install -y libstdc++-10-dev g++-10 gcc-10 cmake \
            libssl-dev libtbb-dev nasm libtool automake autoconf
      - name: Configure
        run: |
          cmake -S torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }} \
                -B cmake-build-release \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_CXX_COMPILER=g++-10 \
                -DTORRENTTOOLS_BUILD_TESTS=OFF \
                -DDOTTORRENT_MB_CRYPTO_LIB=isal \
                -DDOTTORRENT_CRYPTO_LIB=openssl \
                -DSYSCONF_INSTALL_DIR=/etc

      - name: Build
        run: cmake --build cmake-build-release --target torrenttools

      - name: Prepare AppDir
        run: |
          SRCDIR="torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }}"
          DESTDIR=AppDir cmake --install cmake-build-release --prefix=/usr --component torrenttools
          mkdir -p AppDir/usr/share/icons/256x256/apps
          cp $SRCDIR/resources/icons/256x256/torrenttools.png AppDir/usr/share/icons/256x256/apps/
          mkdir -p AppDir/usr/share/applications/
          cp $SRCDIR/packages/appimage/torrenttools.desktop AppDir/usr/share/applications/torrenttools.desktop

      - name: Build AppImage
        uses: AppImageCrafters/build-appimage@master
        with:
          recipe: torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }}/packages/appimage/torrenttools-appimage-recipe.yml
        env:
          UPDATE_INFO: gh-releases-zsync|AppImageCrafters|appimage-demo-qt5|latest|*x86_64.AppImage.zsync

      - name: Upload AppImage as artifact
        uses: actions/upload-artifact@v2
        with:
          name: torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }}-x86_64.AppImage
          path: torrenttools-${{ steps.cmake_version.outputs.cmake_project_version }}-x86_64.AppImage
          retention-days: 1